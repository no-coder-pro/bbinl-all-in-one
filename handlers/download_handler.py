
import os
import re
import json
import yt_dlp
import requests
from telebot import TeleBot
from telebot.types import Message

# ---------------------- Config ----------------------

# URLs ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶∞‡ßá‡¶ú‡ßá‡¶ï‡ßç‡¶∏
URL_RE = re.compile(r'(https?://[^\s]+)')

# ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶• (‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶è‡¶ï ‡¶≤‡ßá‡¶≠‡ßá‡¶≤ ‡¶â‡¶™‡¶∞‡ßá cookies/)
COOKIES_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', 'cookies')

# ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‚Üí ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶™
PLATFORM_COOKIES = {
    "facebook.com": "facebook.txt",
    "fb.watch": "facebook.txt",
    "instagram.com": "instagram.txt",
    "instagr.am": "instagram.txt",
}

# ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶∏‡ßÄ‡¶Æ‡¶æ ~2GB
TELEGRAM_2GB = 2 * 1024 * 1024 * 1024

# YouTube API endpoint (‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ø‡ßá‡¶á API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®)
YOUTUBE_API_ENDPOINT = "https://yt-api-flax.vercel.app/dl?url="

# ---------------------- Utils ----------------------

def _detect_domain(url: str) -> str:
    """URL ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶® ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá‡•§"""
    try:
        m = re.match(r'https?://(?:www\.)?([^/]+)', url)
        return m.group(1).lower() if m else ""
    except Exception:
        return ""

def _cookie_path_for(domain: str) -> str | None:
    """‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶™‡¶• ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§"""
    for k, v in PLATFORM_COOKIES.items():
        if k in domain:
            return os.path.join(COOKIES_FOLDER, v)
    return None

def _is_youtube_domain(domain: str) -> bool:
    """‡¶°‡ßã‡¶Æ‡ßá‡¶á‡¶®‡¶ü‡¶ø YouTube-‡¶è‡¶∞ ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá‡•§"""
    return "youtube.com" in domain or "youtu.be" in domain

def _choose_best_muxed_format(info: dict) -> str | None:
    """info ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßá‡¶∞‡¶æ muxed ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡ßá‡¶Ø‡¶º‡•§"""
    fmts = info.get("formats") or []
    muxed = []
    for f in fmts:
        ac = (f.get("acodec") or "none").lower()
        vc = (f.get("vcodec") or "none").lower()
        if ac != "none" and vc != "none":
            muxed.append(f)
    if not muxed:
        return None
    
    # mp4 ‡¶™‡ßç‡¶∞‡¶æ‡¶ß‡¶æ‡¶®‡ßç‡¶Ø
    mp4_muxed = [f for f in muxed if (f.get("ext") or "").lower() == "mp4"]
    if mp4_muxed:
        mp4_muxed.sort(key=lambda f: (f.get("height") or 0, f.get("tbr") or 0), reverse=True)
        return str(mp4_muxed[0].get("format_id"))

    # ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã muxed
    muxed.sort(key=lambda f: (f.get("height") or 0, f.get("tbr") or 0), reverse=True)
    return str(muxed[0].get("format_id"))

# ---------------------- Download Core (yt-dlp) ----------------------

def download_video_yt_dlp(url: str, download_dir: str, cookies_path: str | None) -> str:
    """yt-dlp ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá‡•§"""
    os.makedirs(download_dir, exist_ok=True)
    opts = {
        "quiet": True,
        "noplaylist": True,
        "retries": 3,
        "ignoreerrors": False,
        "geo_bypass": True,
        "outtmpl": os.path.join(download_dir, "%(title).150s-%(id)s.%(ext)s"),
    }
    if cookies_path and os.path.exists(cookies_path):
        opts["cookiefile"] = cookies_path
    
    # FB/IG ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶™‡¶õ‡¶®‡ßç‡¶¶
    opts["format"] = "b[ext=mp4][acodec!=none][vcodec!=none]/b"
    
    with yt_dlp.YoutubeDL(opts) as ydl:
        info = ydl.extract_info(url, download=True)
        path = info.get("requested_downloads", [{}])[0].get("filepath")
        if not path or not os.path.exists(path):
            # ‡¶´‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï
            path = ydl.prepare_filename(info)
        if not path or not os.path.exists(path):
            raise RuntimeError("‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶®‡¶æ‡•§")
        return path

# ---------------------- Telegram Handler ----------------------

def register(bot: TeleBot, custom_command_handler, command_prefixes_list):

    @custom_command_handler("dl")
    def handle_download(message: Message):
        """
        ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:
          <prefix>dl <url>
        """
        text = message.text or ""
        tokens = text.split(maxsplit=1) 
        
        if len(tokens) < 2: 
            bot.reply_to(
                message,
                f"‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `{command_prefixes_list[0]}dl https://www.youtube.com/watch?v=xxxxxxxx}}`", # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
                parse_mode="Markdown"
            )
            return
        
        args = tokens[1].strip() 
        urls = URL_RE.findall(args)
        if not urls:
            bot.reply_to(
                message,
                f"‚ö†Ô∏è ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶ø‡¶®‡•§ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: `{command_prefixes_list[0]}dl https://www.youtube.com/watch?v=xxxxxxxx}}`", # ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
                parse_mode="Markdown"
            )
            return
        
        url = urls[0].strip()
        domain = _detect_domain(url)
        
        waiting = bot.reply_to(message, "üì• ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        file_path = None

        try:
            if _is_youtube_domain(domain):
                # YouTube-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
                api_url = f"{YOUTUBE_API_ENDPOINT}{url}"
                response = requests.get(api_url)
                if response.status_code != 200:
                    raise Exception(f"API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° {response.status_code} ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
                
                info = response.json()
                if not info.get("success"):
                    raise Exception(f"API ‡¶è‡¶∞‡¶∞: {info.get('error')}")

                # 360p mp4 ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
                download_link = None
                for media in info.get("medias", []):
                    if media.get("formatId") == 18 and media.get("ext") == "mp4":
                        download_link = media.get("url")
                        break
                
                if download_link:
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ 360p ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶è‡¶ñ‡¶æ‡¶®‡ßá: [**‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®**]({download_link})",
                        parse_mode="Markdown"
                    )
                else:
                    bot.send_message(
                        message.chat.id,
                        f"‚ùå 360p MP4 ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ [‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶ø ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®]({url})",
                        parse_mode="Markdown"
                    )

            else:
                # Facebook, Instagram ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø yt-dlp ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
                cookie_file = _cookie_path_for(domain)
                if cookie_file and not os.path.exists(cookie_file):
                    bot.reply_to(
                        message,
                        f"‚ùå `{domain}` ‡¶è‡¶∞ ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø: `{os.path.basename(cookie_file)}`",
                        parse_mode="Markdown"
                    )
                    return
                
                file_path = download_video_yt_dlp(url, "downloads", cookie_file)
                
                size = os.path.getsize(file_path) if os.path.exists(file_path) else 0

                with open(file_path, "rb") as vf:
                    if size and size <= TELEGRAM_2GB and (file_path.lower().endswith(".mp4")):
                        bot.send_video(message.chat.id, vf, caption="‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤")
                    else:
                        vf.seek(0)
                        bot.send_document(message.chat.id, vf, caption="‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶´‡¶≤ (‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü)")
            
        except Exception as e:
            hint = ""
            s = str(e).lower()
            if "requested format is not available" in s or "no such format" in s:
                hint = "\nüîé ‡¶è‡¶á ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶§‡ßá mp4 muxed ‡¶®‡¶æ‡¶ì ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡•§"
            if "age" in s or "sign in" in s or "login" in s or "premium" in s:
                hint += "\nüîí ‡¶≤‡¶ó‡¶á‡¶®/‡¶è‡¶ú-‡¶∞‡ßá‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶ü‡ßá‡¶° ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü‚Äî‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßÅ‡¶ï‡¶ø‡¶ú ‡¶¶‡¶ø‡¶®‡•§"

            bot.reply_to(
                message,
                f"‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n`{str(e)}`{hint}",
                parse_mode="Markdown"
            )
        finally:
            if waiting and waiting.message_id:
                try:
                    bot.delete_message(message.chat.id, waiting.message_id)
                except Exception:
                    pass
            if file_path and os.path.exists(file_path):
                try:
                    os.remove(file_path)
                except Exception as ce:
                    print(f"Cleanup error: {ce}")
